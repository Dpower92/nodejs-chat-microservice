const axios = require('axios');
const http = require('http');

const config = require('../config')[process.env.NODE_ENV || 'development'];
const Queue = require('../server/lib/Queue');
const QueueProcessing = require('../server/services/QueueProcessing');

const log = config.log();
const service = require('../server/service')(config);

const server = http.createServer(service);

server.listen(process.env.PORT);

server.on('listening', () => {
  // Adds this service to the Service Registry
  const registerService = () => axios.put(`http://${process.env.SVC_REGISTRY_HOST}:${process.env.SVC_REGISTRY_PORT}/service/${config.name}/${config.version}/${server.address().port}`)
    .catch((err) => log.fatal(err));
  // Removes this service from the Service Registry
  const unregisterService = () => axios.delete(`http://${process.env.SVC_REGISTRY_HOST}:${process.env.SVC_REGISTRY_PORT}/service/${config.name}/${config.version}/${server.address().port}`)
    .catch((err) => log.fatal(err));

  registerService();

  // Don't ignore me I'm still alive :)
  const interval = setInterval(registerService, process.env.SVC_REGISTER_INTERVAL);
  const cleanup = async () => {
    let clean = false;
    if (!clean) {
      clean = true;
      clearInterval(interval);
      await unregisterService();
    }
  };

  const queueProcessing = new QueueProcessing(config);
  const queue = new Queue(config, queueProcessing);
  queue.check();

  process.on('uncaughtException', async () => {
    await cleanup();
    process.exit(0);
  });

  process.on('SIGINT', async () => {
    await cleanup();
    process.exit(0);
  });

  process.on('SIGTERM', async () => {
    await cleanup();
    process.exit(0);
  });

  log.info(
    `Listening on port ${server.address().port} in ${service.get('env')} mode.`,
  );
});
