const axios = require('axios');
const http = require('http');
const redis = require('socket.io-redis');

const config = require('../config')[process.env.NODE_ENV || 'development'];

const log = config.log();
const service = require('../server/service')(config);

const server = http.createServer(service);
// eslint-disable-next-line import/order
const io = require('socket.io')(server);


// Should be a random port
server.listen(process.env.PORT);

io.adapter(redis({ host: process.env.REDIS_HOST, port: process.env.REDIS_PORT }));
// Namespace
const nsp = io.of('/nsp');
io.origins([`http://localhost:${process.env.APP_PORT}`]);
nsp.on('connection', (socket) => {
  socket.on('join', (data) => {
    socket.join(data.room);
    nsp.in(data.room).emit('message', `New user joined ${data.room} room!`);
  });

  socket.on('typing', (data) => {
    log.info('User typing');
    socket.broadcast.emit('typing', { username: data.username });
  });

  socket.on('stopTyping', () => {
    socket.broadcast.emit('notifyStopTyping');
  });

  socket.on('message', (data) => {
    log.info(`Message: ${data.msg}`);
    nsp.in(data.room).emit('message', data.msg);
  });

  socket.on('disconnect', () => {
    log.info('User disconnected');
    nsp.emit('message', 'user disconnected');
  });
});

server.on('listening', () => {
  // Adds this service to the Service Registry
  const registerService = () => axios.put(`http://localhost:${process.env.SVC_REGISTRY_PORT}/service/${config.name}/${config.version}/${server.address().port}`)
    .catch((err) => log.fatal(err));
  // Removes this service from the Service Registry
  const unregisterService = () => axios.delete(`http://localhost:${process.env.SVC_REGISTRY_PORT}/service/${config.name}/${config.version}/${server.address().port}`)
    .catch((err) => log.fatal(err));

  registerService();

  // Don't ignore me I'm still alive :)
  const interval = setInterval(registerService, process.env.SVC_REGISTER_INTERVAL);
  const cleanup = async () => {
    let clean = false;
    if (!clean) {
      clean = true;
      clearInterval(interval);
      await unregisterService();
    }
  };

  process.on('uncaughtException', async () => {
    await cleanup();
    process.exit(0);
  });

  process.on('SIGINT', async () => {
    await cleanup();
    process.exit(0);
  });

  process.on('SIGTERM', async () => {
    await cleanup();
    process.exit(0);
  });

  log.info(
    `Listening on port ${server.address().port} in ${service.get('env')} mode.`,
  );
});
