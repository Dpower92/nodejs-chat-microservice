const axios = require('axios');
const http = require('http');
const redis = require('socket.io-redis');
const Queue = require('../server/lib/Queue');

const db = require('../server/lib/db');
const seedRoom = require('../server/seeds/rooms');
const UserService = require('../server/services/UserService');

const config = require('../config')[process.env.NODE_ENV || 'development'];

const log = config.log();
const service = require('../server/service')(config);

const server = http.createServer(service);
// eslint-disable-next-line import/order
const io = require('socket.io')(server);

// Connect to Database
db.connect(config.db.dsn)
  .then(() => {
    log.info('Connected to MongoDB');
    seedRoom();
    // Should be a random port
    server.listen(process.env.PORT);
  })
  .catch(err => {
    log.fatal(err);
  });

server.on('listening', () => {
  const userService = new UserService(config);

  const getUserName = async id => {
    try {
      const userAccount = await userService.findById(id);
      if (!userAccount || userAccount.user.error) {
        return false;
      }

      return userAccount.user.username;
    } catch (err) {
      return false;
    }
  };

  const messageService = service.get('messageService');
  io.adapter(
    redis({ host: process.env.REDIS_HOST, port: process.env.REDIS_PORT })
  );

  // Namespace
  const nsp = io.of('/nsp');
  const queue = new Queue(config, nsp);
  io.origins([
    `http://localhost:${process.env.APP_PORT}`,
    `http://${process.env.APP_HOST}:${process.env.APP_PORT}`,
  ]);
  nsp.on('connection', socket => {
    socket.on('join', data => {
      socket.join(data.room);
      nsp
        .in(data.room)
        .emit('message', { message: `New user joined ${data.room} room!` });
    });

    socket.on('typing', async data => {
      log.info('User typing');
      const username = await getUserName(data.username);
      if (username) {
        socket.broadcast.to(data.room).emit('typing', { username });
      }
    });

    socket.on('stopTyping', data => {
      socket.broadcast.to(data.room).emit('notifyStopTyping');
    });

    socket.on('message', async data => {
      const { user, room, msg } = data;
      if (user && room && msg) {
        const username = await getUserName(user);
        if (username) {
          log.info(`Message: ${msg}`);
          nsp.in(data.room).emit('message', { username, message: msg });

          // Detect * command
          if (/\/(.*?)=(.*?)($|\s)/g.test(msg)) {
            // Send to queue
            queue.send(username, room, msg);
          } else {
            // Save in database
            messageService
              .save(username, room, msg)
              .then(message => log.info(`Saved Message: ${message}`))
              .catch(err => log.fatal(err));
          }
        }
      }
    });
    queue.check(nsp);

    socket.on('disconnect2', data => {
      log.info(`User disconnected in ${data.room} room!`);
      nsp.in(data.room).emit('message', { message: 'User disconnected' });
    });
  });

  // Adds this service to the Service Registry
  const registerService = () =>
    axios
      .put(
        `http://${process.env.SVC_REGISTRY_HOST}:${
          process.env.SVC_REGISTRY_PORT
        }/service/${config.name}/${config.version}/${server.address().port}`
      )
      .catch(err => log.fatal(err));
  // Removes this service from the Service Registry
  const unregisterService = () =>
    axios
      .delete(
        `http://${process.env.SVC_REGISTRY_HOST}:${
          process.env.SVC_REGISTRY_PORT
        }/service/${config.name}/${config.version}/${server.address().port}`
      )
      .catch(err => log.fatal(err));

  registerService();

  // Don't ignore me I'm still alive :)
  const interval = setInterval(
    registerService,
    process.env.SVC_REGISTER_INTERVAL
  );
  const cleanup = async () => {
    let clean = false;
    if (!clean) {
      clean = true;
      clearInterval(interval);
      await unregisterService();
    }
  };
  const shutdown = async () => {
    await cleanup();
    process.exitCode = 1;
  };
  process.on('uncaughtException', shutdown);
  process.on('SIGINT', shutdown);
  process.on('SIGTERM', shutdown);

  log.info(
    `Listening on port ${server.address().port} in ${service.get('env')} mode.`
  );
});
